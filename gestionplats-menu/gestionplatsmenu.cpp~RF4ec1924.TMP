#include "gestionplatsmenu.h"
#include "ui_gestionplatsmenu.h"
#include "plats.h"
#include <QPrinter>
#include<QPrintDialog>
#include "menu.h"
#include <QMessageBox>
#include <QIntValidator>
#include <QSqlQuery>
#include <QDebug>
#include<QTimer>
#include<QDateTime>
#include "smtp.h"
#include <QFileDialog>
#include <QDialog>
#include <QTextDocument>
#include<QPdfWriter>
#include <QDebug>
#include <QtPrintSupport/QPrintDialog>
#include<QtPrintSupport/QPrinter>
#include "qcustomplot.h"




#include<excel.h>



Gestionplatsmenu::Gestionplatsmenu(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::Gestionplatsmenu)
{
    ui->setupUi(this);

    ui->tabWidget_2->setCurrentIndex(0);
    QTabBar *tabBar = ui->tabWidget_2->findChild<QTabBar *>();
    tabBar->hide();
    ui->idmenu->setModel(M.listId1());

    // BEGIN : Afiichage list id
    ui->idList_CB->setModel(P.listId());
    // END : Afiichage list id

    // BEGIN : Affichage : naffichiw fel table view
    ui->plat_tab->setModel(P.afficher());
    // END : Affichage


    // BEGIN : Afiichage list id
    ui->idListME_CB->setModel(M.listId1());
    // END : Afiichage list id

    // BEGIN : Affichage : naffichiw fel table view
    ui->menu_tab->setModel(M.afficher1());
    // END : Affichage
    QTimer *timer=new QTimer(this);
    connect(timer,SIGNAL(timeout()),this,SLOT(showTime()));
    timer->start();

    QDate date = QDate ::currentDate();
    QString datee=date.toString();
    ui->DateTime_->setText(datee);
    QSqlQuery qry;

    qry.prepare("SELECT COUNT (*) FROM plats where type='special'");
        qry.exec();
        int special= 0;
        if (qry.next()) {
            special= qry.value(0).toInt();
        }
       QString special_string = QString::number(special);
        ui->count->setText(special_string);
        qry.prepare("SELECT COUNT (*) FROM plats where type='simple'");
            qry.exec();
            int simple= 0;
            if (qry.next()) {
                simple= qry.value(0).toInt();
            }
           QString simple_string = QString::number(simple);
            ui->count_2->setText(simple_string);

}

Gestionplatsmenu::~Gestionplatsmenu()
{
    delete ui;
}


void Gestionplatsmenu:: showTime()
{
    QTime time = QTime::currentTime();

    QString time_text=time.toString("hh : mm : ss");
    if((time.second() % 2) == 0 )
    {
        time_text[3] = ' ';
        time_text[8] = ' ';
    }
    ui->Digital_clock->setText(time_text);



}
void Gestionplatsmenu::INFORMER(QLabel *label, QString message, int duration){
    label->setVisible(true);
    label->setText(message);
    QTimer::singleShot(duration, ui->labelmessage, &QLabel::hide);
    QTimer::singleShot(duration, ui->labelmessage2, &QLabel::hide);


}


void Gestionplatsmenu::on_ajouter_B_clicked()
{
int id_menu= ui->idmenu->currentText().toInt();
    QString nom = ui->nom_LE->text();
    QString ingredient = ui->ingredient_LE->text();
    QString categorie = ui->categorie_LE->text();
    QString prix = ui->prix_LE->text();
     QString type = ui->type->currentText();
    Plats P( nom,ingredient, categorie,prix,type,id_menu );
    bool test = P.ajouter();
    if (test)

    {
        ui->plat_tab->setModel(P.afficher()) ;
        INFORMER(ui->labelmessage," PlAT AJOUTE AVEC SUCCES ",3000);
    }
    else

    {INFORMER(ui->labelmessage,"PlAT NON AJOUTE ",3000);
    }
  }
void Gestionplatsmenu::on_ListDelete_B_clicked()
{
    Plats P;
    P.setId(ui->idList_CB->currentText().toInt());
    bool test=P.supprimer(P.getId());
    if (test)

    {
        ui->plat_tab->setModel(P.afficher()) ;
        INFORMER(ui->labelmessage," PlAT Supprimmer AVEC SUCCES ",3000);
    }
    else

    {INFORMER(ui->labelmessage,"PlAT NON AJOUTE ",3000);
    }

}
void Gestionplatsmenu::on_ConfrimEdit_B_clicked()
{
    Plats P1;
 P1.setId(ui->idList_CB->currentText().toInt());
    P1.setNom(ui->nom_LE->text());
    P1.setIngredient(ui->ingredient_LE->text());
     P1.setCategorie(ui->categorie_LE->text());
      P1.setPrix(ui->prix_LE->text());
      P1.setType(ui->type->currentText());
      qDebug() << P1.getType();
      bool test=P1.modifier();

      if(test)
      {
         ui->plat_tab->setModel(P.afficher()) ;
          INFORMER(ui->labelmessage,"MODIFICATION APPLIQUE ",3000);

      }
      else
      {
            INFORMER(ui->labelmessage,"MODIFICATION  non APPLIQUE ",3000);
      }

}

void Gestionplatsmenu::on_ListEdit_B_clicked()
{
    QSqlQuery qry;
    QString id_string = QString::number(ui->idList_CB->currentText().toInt());
    qry.prepare("SELECT * FROM plats where id=:id");
    qry.bindValue(0, id_string);
    if(qry.exec()) {
        while(qry.next()) {

            ui->nom_LE->setText(qry.value(1).toString());
            ui->ingredient_LE->setText(qry.value(2).toString());
            ui->categorie_LE->setText(qry.value(3).toString());
            ui->prix_LE->setText(qry.value(4).toString());
               ui->type->setCurrentText(qry.value(5).toString());
        }
    }
    ui->tabWidget->setCurrentIndex(1);
}

void Gestionplatsmenu::on_ListEditME_B_clicked()
{
    QSqlQuery qry;
    QString id_string = QString::number(ui->idListME_CB->currentText().toInt());
    qry.prepare("SELECT * FROM menu where id=:id");
    qry.bindValue(0, id_string);
    if(qry.exec()) {
        while(qry.next()) {

            ui->nomME_LE_Edit->setText(qry.value(1).toString());
            ui->prixME_LE_Edit->setText(qry.value(2).toString());
              ui->descME_LE_Edit->setText(qry.value(3).toString());
              ui->idplat_LE_Edit->setText(qry.value(4).toString());
        }
    }
    ui->tabWidget->setCurrentIndex(1);
}

void Gestionplatsmenu::on_ListDeleteME_B_clicked()
{
    Menu M;
    M.setId(ui->idListME_CB->currentText().toInt());
    //bool test=M.supprimer1(M.getId());
    if(M.supprimer1(M.getId())) {
        QMessageBox::information(nullptr, QObject::tr("Done"),
                    QObject::tr("Deleted successefully.\n"
                                "Click Ok to exit."), QMessageBox::Ok);
        ui->idListME_CB->setModel(M.listId1());
        ui->menu_tab->setModel(M.afficher1());
        ui->tabWidget->setCurrentIndex(2);
    }
    else {
        QMessageBox::critical(nullptr, QObject::tr("Nope"),
                    QObject::tr("Deleting failed.\n"
                                "Click Ok to exit."), QMessageBox::Ok);
    }

}




void Gestionplatsmenu::on_ConfrimEditME_B_clicked()
{
    Menu M1 ;
    M1.setId(ui->idListME_CB->currentText().toInt());
    M1.setNom(ui->nomME_LE_Edit->text());
      M1.setPrix(ui->prixME_LE_Edit->text());
      M1.setDescription(ui->descME_LE_Edit->text());
      bool test = M1.modifier1();
      if (test)

      {
          ui->menu_tab->setModel(M.afficher1()) ;
          INFORMER(ui->labelmessage2," menu modifier AVEC SUCCES ",3000);
      }
      else

      {INFORMER(ui->labelmessage2,"menu NON AJOUTE ",3000);
      }
}

void Gestionplatsmenu::on_bouton_imprimer_clicked()
{
    QString strStream;
                QTextStream out(&strStream);

                const int rowCount = ui->plat_tab->model()->rowCount();
                const int columnCount = ui->plat_tab->model()->columnCount();
                QString TT = QDate::currentDate().toString("yyyy/MM/dd");
                out <<"<html>\n"
                      "<head>\n"
                       "<meta Content=\"Text/html; charset=Windows-1251\">\n"

                    << "<title>Plats LIST<title>\n "

                    << "</head>\n"
                    "<body bgcolor=#d6e5ff link=#5000A0>\n"

                    "<h1 style=\"text-align: center;\"><strong> ****LISTE DES PLATS **** "+TT+"</strong></h1>"
                    "<table style=\"text-align: center; font-size: 20px;\" border=1>\n "
                      "</br> </br>";
                // headers
                out << "<thead><tr bgcolor=#d6e5ff>";
                for (int column = 0; column < columnCount; column++)
                    if (!ui->plat_tab->isColumnHidden(column))
                        out << QString("<th>%1</th>").arg(ui->plat_tab->model()->headerData(column, Qt::Horizontal).toString());
                out << "</tr></thead>\n";

                // data table
                for (int row = 0; row < rowCount; row++) {
                    out << "<tr>";
                    for (int column = 0; column < columnCount; column++) {
                        if (!ui->plat_tab->isColumnHidden(column)) {
                            QString data =ui->plat_tab->model()->data(ui->plat_tab->model()->index(row, column)).toString().simplified();
                            out << QString("<td bkcolor=0>%1</td>").arg((!data.isEmpty()) ? data : QString("&nbsp;"));
                        }
                    }
                    out << "</tr>\n";
                }
                out <<  "</table>\n"
                    "</body>\n"
                    "</html>\n";

                QTextDocument *document = new QTextDocument();
                document->setHtml(strStream);

                QPrinter printer;

                QPrintDialog *test = new QPrintDialog(&printer, NULL);
                if (test->exec() == QDialog::Accepted) {
                    document->print(&printer);
                }

                delete document;
}

void Gestionplatsmenu::on_bouton_imprimer_2_clicked()
{
    /* QPrinter printer;
     printer.setPrinterName("printer");
     QPrintDialog dialog(&printer,this);
     if(dialog.exec()==QDialog::Rejected) return;
     ui->textEdit->print(&printer);*/
         QPrinter printer;
         QPrintDialog *printDialog = new QPrintDialog(&printer, this);
         printDialog->setWindowTitle("Imprimer Document");
         printDialog->exec();
}














void Gestionplatsmenu::on_exporter_2_clicked()
{
    QString fileName = QFileDialog::getSaveFileName(this, tr("Excel file"), qApp->applicationDirPath (),
                                                    tr("Excel Files (*.xls)"));
    if (fileName.isEmpty())
        return;

    EXCEL obj(fileName, "mydata", ui->plat_tab);

    //colums to export
 obj.addField(0, "id", "number");
    obj.addField(1, "nom", "char(20)");
    obj.addField(2, "ingredient", "char(20)");
    obj.addField(3, "categorie", "char(20)");
     obj.addField(4, "type", "char(20)");
      obj.addField(5, "prix", "char(20)");
      obj.addField(6, "id_menu", "char(20)");


    int retVal = obj.export2Excel();
    if( retVal > 0)
    {
        QMessageBox::information(this, tr("Done"),
                                 QString(tr("%1 records exported!")).arg(retVal)
                                 );
    }

}


















void Gestionplatsmenu::on_pushButton_3_clicked()
{
     ui->menu_tab->setModel(M.afficher1()) ;
}

void Gestionplatsmenu::on_exporterM_clicked()
{
    QString strStream;
                        QTextStream out(&strStream);

                        const int rowCount = ui->menu_tab->model()->rowCount();
                        const int columnCount = ui->menu_tab->model()->columnCount();

                        out <<  "<html>\n"
                            "<head>\n"
                            "<meta Content=\"Text/html; charset=Windows-1251\">\n"
                            <<  QString("<title>%1</title>\n").arg("strTitle")
                            <<  "</head>\n"
                            "<body bgcolor=#ffffff link=#5000A0>\n"
                           //     "<align='right'> " << datefich << "</align>"
                            "<center> <H1>Liste des plats </H1></br></br><table border=1 cellspacing=0 cellpadding=2>\n";

                        // headers
                        out << "<thead><tr bgcolor=#f0f0f0> <th>Numero</th>";
                        for (int column = 0; column < columnCount; column++)
                            if (!ui->menu_tab->isColumnHidden(column))
                                out << QString("<th>%1</th>").arg(ui->menu_tab->model()->headerData(column, Qt::Horizontal).toString());
                        out << "</tr></thead>\n";

                        // data table
                        for (int row = 0; row < rowCount; row++) {
                            out << "<tr> <td bkcolor=0>" << row+1 <<"</td>";
                            for (int column = 0 ; column < columnCount; column++) {
                                if (!ui->menu_tab->isColumnHidden(column)) {
                                    QString data = ui->menu_tab->model()->data(ui->menu_tab->model()->index(row, column)).toString().simplified();
                                    out << QString("<td bkcolor=0>%1</td>").arg((!data.isEmpty()) ? data : QString("&nbsp;"));
                                }
                            }
                            out << "</tr>\n";
                        }
                        out <<  "</table> </center>\n"
                            "</body>\n"
                            "</html>\n";

                  QString fileName = QFileDialog::getSaveFileName((QWidget* )0, "Sauvegarder en PDF", QString(), "*.pdf");
                    if (QFileInfo(fileName).suffix().isEmpty()) { fileName.append(".pdf"); }

                   QPrinter printer (QPrinter::PrinterResolution);
                    printer.setOutputFormat(QPrinter::PdfFormat);
                  /* printer.setPaperSize(QPrinter::A4);*/
                  printer.setOutputFileName(fileName);

                   QTextDocument doc;
                    doc.setHtml(strStream);
                    /*doc.setPageSize(printer.pageRect().size()); // This is necessary if you want to hide the page number*/
                    doc.print(&printer);
}

void Gestionplatsmenu::on_exporterXM_clicked()
{
    QString fileName = QFileDialog::getSaveFileName(this, tr("Excel file"), qApp->applicationDirPath (),
                                                    tr("Excel Files (*.xls)"));
    if (fileName.isEmpty())
        return;

    EXCEL obj(fileName, "mydata", ui->menu_tab);

    //colums to export
 obj.addField(0, "id", "number");
    obj.addField(1, "nom", "char(20)");
    obj.addField(2, "prix", "char(20)");
    obj.addField(3, "description", "char(20)");


    int retVal = obj.export2Excel();
    if( retVal > 0)
    {
        QMessageBox::information(this, tr("Done"),
                                 QString(tr("%1 records exported!")).arg(retVal)
                                 );
    }

}



void Gestionplatsmenu::on_bouton_imprimer_3_clicked()
{
    ui->tabWidget_2->setCurrentIndex(3);
}




void Gestionplatsmenu::on_pushButton_5_clicked()
{
     ui->tabWidget_2->setCurrentIndex(2);
}

void Gestionplatsmenu::on_pushButton_6_clicked()
{
    ui->tabWidget_2->setCurrentIndex(1);
}

void Gestionplatsmenu::on_bouton_imprimer_4_clicked()
{
    ui->tabWidget_2->setCurrentIndex(0);
}

void Gestionplatsmenu::on_pushButton_clicked()
{
   ui->tabWidget_2->setCurrentIndex(1);
}

void Gestionplatsmenu::on_pushButton_2_clicked()
{
  ui->tabWidget_2->setCurrentIndex(0);
}



void Gestionplatsmenu::on_chercher_textChanged(const QString &arg1)
{
    QString by=ui->listechercher->currentText();
            ui->plat_tab->setModel(P.chercher(arg1,by));

}

void Gestionplatsmenu::on_trier_clicked()
{
    QString Tri = ui->listtrier->currentText();
            ui->plat_tab->setModel(P.Trier(Tri));
}





void Gestionplatsmenu::on_pushButton_8_clicked()
{
    ui->plat_tab->setModel(P.afficher()) ;
    INFORMER(ui->labelmessage,"LISTE PLAT CHARGEE   ",3000);
}
QVector<double> Gestionplatsmenu::Statistique_vente()
{
    QSqlQuery q;
    QVector<double> stat(2);
    stat[0]=0;
    stat[1]=0;

    q.prepare("SELECT count (type) FROM plats WHERE type like '%special%'");
    q.exec();
    while (q.next())
    {
        stat[0]++;
    }
    q.prepare("SELECT count (type) FROM plats WHERE type like '%simple%'");
    q.exec();
    while (q.next())
    {
        stat[1]++;
    }

    return stat;
}
void Gestionplatsmenu::setupStyledDemo(QCustomPlot *customPlot)
{
    // prepare data:
    QVector<double> x3(2), y3(20);
    for (int i=0; i<x3.size(); ++i)
    {
      x3[i] = i+1;

    }
    for (int i=0; i<y3.size(); ++i)
    {
      y3[i] = i+1;

    }
     QCPGraph *graph1 = customPlot->addGraph();


     QCPBars *bars1 = new QCPBars(customPlot->xAxis, customPlot->yAxis);
     bars1->setWidth(9/(double)x3.size());
     bars1->setData(x3, y3);
     bars1->setPen(Qt::NoPen);
     bars1->setBrush(QColor(10, 140, 70, 160));



     // move bars above graphs and grid below bars:
     customPlot->addLayer("abovemain", customPlot->layer("main"), QCustomPlot::limAbove);
     customPlot->addLayer("belowmain", customPlot->layer("main"), QCustomPlot::limBelow);
     graph1->setLayer("abovemain");
     customPlot->xAxis->grid()->setLayer("belowmain");
     customPlot->yAxis->grid()->setLayer("belowmain");

     // set some pens, brushes and backgrounds:
     customPlot->xAxis->setBasePen(QPen(Qt::white, 1));
     customPlot->yAxis->setBasePen(QPen(Qt::white, 1));
     customPlot->xAxis->setTickPen(QPen(Qt::white, 1));
     customPlot->yAxis->setTickPen(QPen(Qt::white, 1));
     customPlot->xAxis->setSubTickPen(QPen(Qt::white, 1));
     customPlot->yAxis->setSubTickPen(QPen(Qt::white, 1));
     customPlot->xAxis->setTickLabelColor(Qt::white);
     customPlot->yAxis->setTickLabelColor(Qt::white);
     customPlot->xAxis->grid()->setPen(QPen(QColor(140, 140, 140), 1, Qt::DotLine));
     customPlot->yAxis->grid()->setPen(QPen(QColor(140, 140, 140), 1, Qt::DotLine));
     customPlot->xAxis->grid()->setSubGridPen(QPen(QColor(80, 80, 80), 1, Qt::DotLine));
     customPlot->yAxis->grid()->setSubGridPen(QPen(QColor(80, 80, 80), 1, Qt::DotLine));
     customPlot->xAxis->grid()->setSubGridVisible(true);
     customPlot->yAxis->grid()->setSubGridVisible(true);
     customPlot->xAxis->grid()->setZeroLinePen(Qt::NoPen);
     customPlot->yAxis->grid()->setZeroLinePen(Qt::NoPen);
     customPlot->xAxis->setUpperEnding(QCPLineEnding::esSpikeArrow);
     customPlot->yAxis->setUpperEnding(QCPLineEnding::esSpikeArrow);
     QLinearGradient plotGradient;
     plotGradient.setStart(0, 0);
     plotGradient.setFinalStop(0, 350);
     plotGradient.setColorAt(0, QColor(80, 80, 80));
     plotGradient.setColorAt(1, QColor(50, 50, 50));
     customPlot->setBackground(plotGradient);
     QLinearGradient axisRectGradient;
     axisRectGradient.setStart(0, 0);
     axisRectGradient.setFinalStop(0, 350);
     axisRectGradient.setColorAt(0, QColor(80, 80, 80));
     axisRectGradient.setColorAt(1, QColor(30, 30, 30));
     customPlot->axisRect()->setBackground(axisRectGradient);

     customPlot->rescaleAxes();
     customPlot->yAxis->setRange(0, 2);


}

void Gestionplatsmenu::on_pushButton_10_clicked()
{
      ui->tabWidget_2->setCurrentIndex(4);
}

void Gestionplatsmenu::on_pushButton_9_clicked()
{
setupStyledDemo(ui->customPlot);
 customPlot->replot()
}
